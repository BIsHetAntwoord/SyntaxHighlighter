#line 2 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter/clexer.scanner.cc"

#line 4 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter/clexer.scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cpp_yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cpp_yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void cpp_yyrestart (FILE *input_file ,yyscan_t yyscanner );
void cpp_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE cpp_yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void cpp_yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void cpp_yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void cpp_yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void cpp_yypop_buffer_state (yyscan_t yyscanner );

static void cpp_yyensure_buffer_stack (yyscan_t yyscanner );
static void cpp_yy_load_buffer_state (yyscan_t yyscanner );
static void cpp_yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER cpp_yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE cpp_yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE cpp_yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE cpp_yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *cpp_yyalloc (yy_size_t ,yyscan_t yyscanner );
void *cpp_yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void cpp_yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer cpp_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cpp_yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cpp_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cpp_yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cpp_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 178
#define YY_END_OF_BUFFER 179
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[615] =
    {   0,
        0,    0,    0,    0,    0,    0,  179,  171,  170,  170,
      168,  131,  167,  166,  122,  135,  163,  164,  120,  118,
      154,  119,  151,  121,  156,  158,  128,  117,  127,  155,
      169,  161,  162,  137,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  159,  136,  160,  134,  172,  173,
      172,  175,  177,  175,  174,  175,  170,  126,  165,  144,
      132,  145,  142,  123,  140,  124,  141,  150,  153,  143,
      157,  138,  130,  125,  129,  139,  169,  147,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

       18,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,   32,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  113,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  146,  133,  173,  177,  176,  176,
      152,  148,  149,  169,  106,    3,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,   29,  169,
      169,  169,  169,   35,  169,  169,  169,   39,  111,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
       60,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  115,  176,  169,  169,    4,  169,  169,
        5,  169,    7,  169,    9,  169,  169,  169,  169,  169,
      169,  169,  169,  169,   21,   22,  169,  169,  169,  169,
      169,  169,  169,   31,  169,  169,  169,  169,  169,  169,
      169,  169,  169,   36,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,   57,  169,  169,   59,  169,  169,
      169,  169,  169,  169,   68,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  109,    6,    8,   10,  110,
       11,  169,  169,  169,  169,  169,  169,  169,  169,  169,
       26,   27,   28,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  114,
      169,  169,  169,  169,  169,  169,  169,   49,  169,  169,
      169,  169,  169,  169,  169,   58,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,   64,  169,   66,
      169,  169,  169,  169,  169,   70,  169,  169,  169,  169,
      107,  108,  169,  169,  169,  169,  169,   17,   19,  169,
      169,   24,   25,   30,   33,   34,  169,  169,  169,   72,

      169,  169,  169,  169,  169,  169,  112,  169,  169,  169,
      169,  169,   45,  169,  169,   48,   50,  104,   51,   52,
       54,   55,  169,  105,  169,   62,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  100,  116,  169,    2,  169,  169,  169,  169,   16,
      169,  169,   74,   76,   78,  169,  169,  169,  169,   37,
      169,   40,  169,  169,   43,  169,  169,  169,  169,  169,
       61,  169,  169,  169,  169,   73,  169,  169,  169,  169,
      169,   67,  169,  101,  169,  169,  169,  169,  169,   14,
       15,  169,   23,  169,  169,   98,   96,  169,   41,   42,

      169,   46,  169,  169,  169,   56,   63,   75,   77,   79,
      169,  169,  169,  169,   65,   69,  169,  103,  169,  169,
       13,  169,  169,  169,  169,  169,  169,   38,   44,  169,
      169,  169,  169,  169,   99,   97,  102,  169,   12,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,    1,  169,  169,  169,
      169,   88,  169,  169,  169,  169,  169,  169,   53,  169,
      169,  169,  169,  169,  169,  169,  169,   20,   90,   92,
       94,  169,  169,  169,   80,  169,  169,  169,  169,  169,
       89,  169,  169,  169,  169,   82,   84,   86,  169,   71,

       91,   93,   95,  169,  169,  169,   81,  169,   83,   85,
       87,  169,   47,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   18,   23,   18,   24,   18,   25,   26,   27,
       28,   29,   30,    1,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       32,   33,   34,   35,   36,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   31,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    1,    1,    1,    1,    1,    1,
        2,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[618] =
    {   0,
        0,    0,   64,   66,   68,   70,  629,  630,  630,  626,
      630,  599,  630,  619,  597,   66,  630,  630,  596,   64,
      630,   67,  611,  594,  596,  630,   51,  592,   52,  630,
        0,  630,  630,  591,   37,   52,   62,   48,   41,   70,
      568,   62,  567,  560,   77,   68,   60,  574,   84,   90,
       87,   95,  107,  564,  630,   59,  630,  630,  630,  630,
      611,  630,  630,  610,  630,  135,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  599,  630,  630,
      630,  582,  630,  630,  630,  581,    0,  630,  563,  567,
      558,  550,  549,  553,  561,   93,  564,  563,  105,  116,

      543,  549,  543,  540,   75,  548,  545,  543,  539,  546,
      535,    0,  538,  102,  539,  532,  538,  527,  529,  536,
      541,  545,  539,  111,  541,  117,  528,  116,  127,  532,
      528,  120,  527,  110,  523,  524,  122,  527,  518,   38,
      124,  525,  520,  515,  630,  630,  630,  630,  630,  565,
      630,  630,  630,  523,  529,    0,  514,  132,  516,  525,
      520,  521,  506,  504,  506,  120,  509,  518,  513,  515,
      515,  510,  502,  131,  508,  494,  510,  509,    0,  504,
      494,  493,  497,  164,  498,  503,  498,    0,  502,  490,
      483,  494,  481,  476,  477,  484,  485,  480,  472,  474,

      477,  484,  469,  467,  467,  470,  466,  469,  477,  476,
        0,  475,  460,  464,  468,  463,  456,  470,  472,  471,
      131,  460,  451,  469,  630,  455,  462,    0,  453,  448,
        0,  454,    0,  455,    0,  444,  450,  441,  450,  439,
      437,  437,  444,  442,    0,    0,  444,  435,  434,  445,
      438,  429,  434,    0,  429,  432,  457,  459,  456,  441,
      147,  439,  420,    0,  436,  419,  431,  420,  433,  417,
      415,  430,  425,  420,  410,  408,  409,  406,  419,  154,
      414,  419,  418,  409,    0,  397,  418,    0,  152,  184,
      404,  409,  408,  394,    0,  394,  395,  410,  395,  404,

      408,  402,  159,  390,  401,    0,    0,    0,    0,    0,
      157,  391,  379,  391,  396,  395,  390,  395,  378,  383,
        0,    0,    0,  391,  375,  388,  392,  391,  390,  370,
      387,  382,  363,  368,  373,  368,  366,  362,  361,    0,
      370,  359,  374,  373,  356,  369,  360,    0,  368,  352,
      364,  366,  349,  359,  365,    0,  346,  359,  359,  361,
      374,  376,  373,  358,  164,  356,  337,    0,  342,    0,
      353,  344,  352,  338,  345,    0,  330,  332,  327,  340,
        0,    0,  342,  321,  323,  327,  322,    0,    0,  337,
      330,    0,    0,    0,    0,    0,  319,  318,  317,    0,

      317,  333,  333,  332,  326,  329,    0,  312,  314,  323,
      321,  306,    0,  319,  306,    0,    0,    0,    0,  322,
        0,    0,  302,    0,  314,    0,  307,  318,  317,  316,
      296,  313,  308,  289,  294,  305,  298,  297,  288,  288,
      305,    0,    0,  291,    0,  302,  287,  296,  295,    0,
      299,  279,    0,    0,    0,  278,  278,  276,  275,    0,
      290,    0,  275,  286,    0,  285,  272,  273,  177,  282,
        0,  281,  266,  265,  264,    0,  264,  280,  280,  279,
      274,    0,  272,    0,  276,  256,  265,  255,  255,    0,
        0,  268,    0,  198,  251,    0,    0,  264,    0,    0,

      264,    0,  250,  248,  264,    0,    0,    0,    0,    0,
      245,  245,  243,  242,    0,    0,  241,    0,  245,  239,
        0,  256,  269,  271,  268,  253,  204,    0,    0,  247,
      233,  232,  210,  230,    0,    0,    0,  235,    0,  229,
      246,  245,  244,  224,  255,  257,  254,  239,  219,  232,
      217,  248,  250,  247,  232,  217,    0,  212,  211,  210,
      209,    0,  227,  226,  225,  205,  223,  205,    0,  221,
      220,  219,  199,  230,  232,  229,  214,    0,    0,    0,
        0,  194,  193,  192,    0,  207,  184,  182,  175,  171,
        0,  188,  182,  177,  155,    0,    0,    0,  165,    0,

        0,    0,    0,  144,  141,  131,    0,  117,    0,    0,
        0,   89,    0,  630,  241,  243,  122
    } ;

static yyconst flex_int16_t yy_def[618] =
    {   0,
      614,    1,  615,  615,  616,  616,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      617,  614,  614,  614,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  617,  614,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  614,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,    0,  614,  614,  614
    } ;

static yyconst flex_int16_t yy_nxt[696] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,    8,    8,    8,
        8,    8,    8,    8,   25,   26,   27,   28,   29,   30,
       31,   32,    8,   33,   34,   31,   35,   36,   37,   38,
       39,   40,   41,   31,   42,   31,   43,   44,   45,   46,
       47,   31,   48,   49,   50,   51,   52,   53,   54,   31,
       31,   55,   56,   57,   58,   60,   61,   60,   61,   63,
       64,   63,   64,   65,   71,   65,   74,   82,   83,   85,
       86,   76,  218,   89,  219,   90,  145,  103,  100,  104,
       91,   75,   92,   72,   77,   78,   93,  101,   96,  105,

       66,   94,   66,  112,   95,   97,  106,  102,   98,  113,
      114,   99,  124,  117,  107,  125,  108,  118,  121,  109,
      122,  146,  110,   87,  123,  174,  119,  127,  128,  175,
      131,  136,  120,  132,  133,  137,  149,  150,  129,  139,
      138,  130,  134,  613,  140,  141,  161,  162,  183,  135,
      142,  143,  165,  166,  167,  194,  184,  168,  201,  197,
      195,  198,  169,  203,  207,  210,  214,  220,  229,  211,
      612,  199,  208,  238,  239,  215,  202,  247,  221,  204,
      248,  230,  257,  298,  258,  611,  259,  260,  331,  350,
      299,  358,  383,  332,  379,  610,  359,  384,  609,  261,

      360,  608,  361,  351,  362,  432,  363,  364,  380,  607,
      433,  262,  606,  504,  263,  505,  523,  605,  524,  365,
      525,  526,  545,  604,  546,  603,  547,  548,  552,  602,
      553,  366,  554,  555,  367,  574,  601,  575,  600,  576,
      577,   59,   59,   62,   62,  599,  598,  597,  596,  595,
      594,  593,  592,  591,  590,  589,  588,  587,  586,  585,
      584,  583,  582,  581,  580,  579,  578,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  551,  550,  549,  544,  543,
      542,  541,  540,  539,  538,  537,  536,  535,  534,  533,

      532,  531,  530,  529,  528,  527,  522,  521,  520,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  509,
      508,  507,  506,  503,  502,  501,  500,  499,  498,  497,
      496,  495,  494,  493,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  431,  430,  429,  428,  427,  426,  425,

      424,  423,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  413,  412,  411,  410,  409,  408,  407,  406,  405,
      404,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  387,  386,  385,
      382,  381,  378,  377,  376,  375,  374,  373,  372,  371,
      370,  369,  368,  357,  356,  355,  354,  353,  352,  349,
      348,  347,  346,  345,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  335,  334,  333,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      316,  315,  314,  313,  312,  311,  310,  309,  308,  307,

      306,  305,  304,  303,  302,  301,  300,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  288,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  278,  277,  276,  275,
      274,  273,  272,  271,  270,  269,  268,  267,  266,  265,
      264,  256,  255,  254,  253,  252,  251,  250,  249,  246,
      245,  244,  243,  242,  241,  240,  237,  236,  235,  234,
      233,  232,  231,  228,  227,  226,  225,  224,  223,  222,
      217,  216,  213,  212,  209,  206,  205,  200,  196,  193,
      192,  191,  190,  189,  188,  187,  186,  185,  182,  181,
      180,  179,  178,  177,  176,  173,  172,  171,  170,  164,

      163,  160,  159,  158,  157,  156,  155,  154,  153,  152,
      151,  148,  147,  144,  126,  116,  115,  111,   88,   84,
       81,   80,   79,   73,   70,   69,   68,   67,  614,    7,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614

    } ;

static yyconst flex_int16_t yy_chk[696] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    4,    4,    5,
        5,    6,    6,    5,   16,    6,   20,   27,   27,   29,
       29,   22,  140,   35,  140,   35,   56,   39,   38,   39,
       35,   20,   35,   16,   22,   22,   36,   38,   37,   39,

        5,   36,    6,   42,   36,   37,   40,   38,   37,   42,
       42,   37,   47,   45,   40,   47,   40,   45,   46,   40,
       46,   56,   40,  617,   46,  105,   45,   49,   49,  105,
       50,   51,   45,   50,   50,   51,   66,   66,   49,   52,
       51,   49,   50,  612,   52,   53,   96,   96,  114,   50,
       53,   53,   99,   99,  100,  124,  114,  100,  128,  126,
      124,  126,  100,  129,  132,  134,  137,  141,  158,  134,
      608,  126,  132,  166,  166,  137,  128,  174,  141,  129,
      174,  158,  184,  221,  184,  606,  184,  184,  261,  280,
      221,  289,  311,  261,  303,  605,  289,  311,  604,  184,

      289,  599,  290,  280,  290,  365,  290,  290,  303,  595,
      365,  184,  594,  469,  184,  469,  494,  593,  494,  290,
      494,  494,  527,  592,  527,  590,  527,  527,  533,  589,
      533,  290,  533,  533,  290,  556,  588,  556,  587,  556,
      556,  615,  615,  616,  616,  586,  584,  583,  582,  577,
      576,  575,  574,  573,  572,  571,  570,  568,  567,  566,
      565,  564,  563,  561,  560,  559,  558,  555,  554,  553,
      552,  551,  550,  549,  548,  547,  546,  545,  544,  543,
      542,  541,  540,  538,  534,  532,  531,  530,  526,  525,
      524,  523,  522,  520,  519,  517,  514,  513,  512,  511,

      505,  504,  503,  501,  498,  495,  492,  489,  488,  487,
      486,  485,  483,  481,  480,  479,  478,  477,  475,  474,
      473,  472,  470,  468,  467,  466,  464,  463,  461,  459,
      458,  457,  456,  452,  451,  449,  448,  447,  446,  444,
      441,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  425,  423,  420,  415,  414,
      412,  411,  410,  409,  408,  406,  405,  404,  403,  402,
      401,  399,  398,  397,  391,  390,  387,  386,  385,  384,
      383,  380,  379,  378,  377,  375,  374,  373,  372,  371,
      369,  367,  366,  364,  363,  362,  361,  360,  359,  358,

      357,  355,  354,  353,  352,  351,  350,  349,  347,  346,
      345,  344,  343,  342,  341,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  328,  327,  326,  325,
      324,  320,  319,  318,  317,  316,  315,  314,  313,  312,
      305,  304,  302,  301,  300,  299,  298,  297,  296,  294,
      293,  292,  291,  287,  286,  284,  283,  282,  281,  279,
      278,  277,  276,  275,  274,  273,  272,  271,  270,  269,
      268,  267,  266,  265,  263,  262,  260,  259,  258,  257,
      256,  255,  253,  252,  251,  250,  249,  248,  247,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  234,  232,

      230,  229,  227,  226,  224,  223,  222,  220,  219,  218,
      217,  216,  215,  214,  213,  212,  210,  209,  208,  207,
      206,  205,  204,  203,  202,  201,  200,  199,  198,  197,
      196,  195,  194,  193,  192,  191,  190,  189,  187,  186,
      185,  183,  182,  181,  180,  178,  177,  176,  175,  173,
      172,  171,  170,  169,  168,  167,  165,  164,  163,  162,
      161,  160,  159,  157,  155,  154,  150,  144,  143,  142,
      139,  138,  136,  135,  133,  131,  130,  127,  125,  123,
      122,  121,  120,  119,  118,  117,  116,  115,  113,  111,
      110,  109,  108,  107,  106,  104,  103,  102,  101,   98,

       97,   95,   94,   93,   92,   91,   90,   89,   86,   82,
       78,   64,   61,   54,   48,   44,   43,   41,   34,   28,
       25,   24,   23,   19,   15,   14,   12,   10,    7,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
#line 2 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
#include "scanners.h"

extern "C" int cpp_yywrap(void* scanner);
void StoreString(YYSTYPE* output, const char* input);


#line 796 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter/clexer.scanner.cc"

#define INITIAL 0
#define MACRO 1
#define STR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int cpp_yylex_init (yyscan_t* scanner);

int cpp_yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cpp_yylex_destroy (yyscan_t yyscanner );

int cpp_yyget_debug (yyscan_t yyscanner );

void cpp_yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE cpp_yyget_extra (yyscan_t yyscanner );

void cpp_yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *cpp_yyget_in (yyscan_t yyscanner );

void cpp_yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *cpp_yyget_out (yyscan_t yyscanner );

void cpp_yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t cpp_yyget_leng (yyscan_t yyscanner );

char *cpp_yyget_text (yyscan_t yyscanner );

int cpp_yyget_lineno (yyscan_t yyscanner );

void cpp_yyset_lineno (int line_number ,yyscan_t yyscanner );

int cpp_yyget_column  (yyscan_t yyscanner );

void cpp_yyset_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * cpp_yyget_lval (yyscan_t yyscanner );

void cpp_yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cpp_yywrap (yyscan_t yyscanner );
#else
extern int cpp_yywrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cpp_yylex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int cpp_yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 23 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"


#line 1036 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter/clexer.scanner.cc"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cpp_yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				cpp_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		cpp_yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 615 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 614 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 30 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 31 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 32 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 33 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 34 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 35 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 36 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 40 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 41 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 42 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 43 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 44 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 45 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 46 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 47 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 48 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 49 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 51 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 52 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 53 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 54 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 55 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 56 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 57 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 58 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 59 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 60 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 61 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 62 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 63 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 64 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 65 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 66 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 67 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 68 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 69 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 70 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 71 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 72 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 73 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 74 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 75 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 76 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 77 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 78 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 79 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 80 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 81 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 82 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 83 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 84 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 85 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 86 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 87 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 88 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 89 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 90 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 91 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 111 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 112 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 113 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 115 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 116 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 117 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 118 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 119 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 120 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 121 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 122 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 123 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 124 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 125 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 126 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 127 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 128 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 129 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 130 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 131 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 132 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 133 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 134 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 135 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 136 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 137 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 138 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 139 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 140 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 141 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 142 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return KEYW_1;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 144 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 145 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 146 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 147 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 148 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 149 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 150 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 151 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 152 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 153 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 154 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,"&gt;"); return OPERATOR;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 155 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,"&lt;"); return OPERATOR;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 156 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,"&gt;="); return OPERATOR;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 157 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,"&lt;="); return OPERATOR;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 158 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 159 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,"&amp;&amp;"); return OPERATOR;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 160 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 161 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 162 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,"&amp;"); return OPERATOR;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 163 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 164 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 165 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,"&lt;&lt;"); return OPERATOR;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 166 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,"&gt;&gt;"); return OPERATOR;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 167 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 168 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 169 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 170 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 171 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 172 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,"&amp;="); return OPERATOR;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 173 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 174 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 175 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,"&lt;&lt;="); return OPERATOR;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 176 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,"&gt;&gt;="); return OPERATOR;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 177 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,"-&gt;"); return OPERATOR;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 178 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 179 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,"-&gt;*"); return OPERATOR;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 180 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 181 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 182 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 183 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 184 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 185 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 186 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 187 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 188 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 189 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 190 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 191 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OPERATOR;}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 193 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return PREPROCESSOR;}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 194 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{BEGIN(MACRO); yylval->str=new std::string("#");}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 196 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{BEGIN(STR); yylval->str=new std::string("\"");}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 198 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return SPACE;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 199 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OTHER;}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 200 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return NEWLINE;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 201 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{StoreString(yylval,yytext); return OTHER;}
	YY_BREAK



case 172:
YY_RULE_SETUP
#line 206 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{*(yylval->str) += yytext;}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 207 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{yyless(0); BEGIN(INITIAL); return PREPROCESSOR;}
	YY_BREAK



case 174:
YY_RULE_SETUP
#line 212 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{*(yylval->str) += yytext; BEGIN(INITIAL); return STRING;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 213 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{*(yylval->str) += yytext;}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 214 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{*(yylval->str) += yytext;}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 215 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
{*(yylval->str) += yytext; BEGIN(INITIAL); return OTHER;}
	YY_BREAK

case 178:
YY_RULE_SETUP
#line 218 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"
ECHO;
	YY_BREAK
#line 2018 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter/clexer.scanner.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MACRO):
case YY_STATE_EOF(STR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * cpp_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( cpp_yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of cpp_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cpp_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cpp_yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cpp_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 615 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 615 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 614);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cpp_yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cpp_yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cpp_yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        cpp_yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            cpp_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	cpp_yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	cpp_yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void cpp_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cpp_yypop_buffer_state();
	 *		cpp_yypush_buffer_state(new_buffer);
     */
	cpp_yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cpp_yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (cpp_yywrap()) processing, but the only time this flag
	 * is looked at is after cpp_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void cpp_yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cpp_yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cpp_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cpp_yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cpp_yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cpp_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	cpp_yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cpp_yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void cpp_yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cpp_yyfree((void *) b->yy_ch_buf ,yyscanner );

	cpp_yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cpp_yyrestart() or at EOF.
 */
    static void cpp_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	cpp_yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cpp_yy_init_buffer was _probably_
     * called from cpp_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void cpp_yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cpp_yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void cpp_yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	cpp_yyensure_buffer_stack(yyscanner);

	/* This block is copied from cpp_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cpp_yy_switch_to_buffer. */
	cpp_yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void cpp_yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	cpp_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		cpp_yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cpp_yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)cpp_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in cpp_yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)cpp_yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in cpp_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cpp_yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cpp_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cpp_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cpp_yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cpp_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cpp_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE cpp_yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return cpp_yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to cpp_yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cpp_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cpp_yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cpp_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cpp_yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cpp_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE cpp_yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int cpp_yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int cpp_yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *cpp_yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *cpp_yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t cpp_yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *cpp_yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void cpp_yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void cpp_yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "cpp_yyset_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void cpp_yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "cpp_yyset_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see cpp_yy_switch_to_buffer
 */
void cpp_yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void cpp_yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int cpp_yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void cpp_yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * cpp_yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void cpp_yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* cpp_yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int cpp_yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) cpp_yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* cpp_yylex_init_extra has the same functionality as cpp_yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to cpp_yyalloc in
 * the yyextra field.
 */

int cpp_yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    cpp_yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) cpp_yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    cpp_yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cpp_yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cpp_yylex_init()
     */
    return 0;
}

/* cpp_yylex_destroy is for both reentrant and non-reentrant scanners. */
int cpp_yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cpp_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cpp_yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	cpp_yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        cpp_yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cpp_yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    cpp_yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cpp_yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *cpp_yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cpp_yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see cpp_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 217 "C:\\Users\\Asus\\Documents\\Data\\Codes\\Programeren\\C++\\Projecten\\SyntaxHighlighter\\clexer.l"



extern "C" int cpp_yywrap(void* scanner) {return 1;}

void StoreString(YYSTYPE* output, const char* input)
{
    output->str = new std::string(input);
}

